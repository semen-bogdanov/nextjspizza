'use server'

import { prisma } from '@/prisma/prisma-client'
import { PayOrderTemplate } from '@/shared/components/shared/email-temapltes'
import { VerificationUserTemplate } from '@/shared/components/shared/email-temapltes/verification-user'
import { CheckoutFormValues } from '@/shared/constants'
import { createPayment, sendEmail } from '@/shared/lib'
import { getUserSession } from '@/shared/lib/get-user-session'
import { OrderStatus, Prisma } from '@prisma/client'
import { hashSync } from 'bcrypt'
import { cookies } from 'next/headers'

// 17:47:00 –°–µ—Ä–≤–µ—Ä–Ω—ã–π —ç–∫—à–µ–Ω
export async function createOrder(data: CheckoutFormValues) {
	try {
		// 18:06:00
		const cookieStore = cookies()
		const cartToken = cookieStore.get('cartToken')?.value
		if (!cartToken) {
			throw new Error('–¢–æ–∫–µ–Ω –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω')
		}
		/* –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É */
		const userCart = await prisma.cart.findFirst({
			include: {
				user: true,
				items: {
					include: {
						ingredients: true,
						productItem: {
							include: {
								product: true,
							},
						},
					},
				},
			},
			where: {
				token: cartToken,
			},
		})
		/* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞ –≤–æ–∑—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
		if (!userCart) {
			throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
		}
		/* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è –≤–æ–∑—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
		if (userCart?.totalAmount === 0) {
			throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
		}

		//const user = await getUserSession() // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

		// if (!user) {
		// 	throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
		// }

		/* –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ */
		const order = await prisma.order.create({
			data: {
				token: cartToken, //
				fullName: data.firstName + ' ' + data.lastName, //
				email: data.email, //
				phone: data.phone, //
				address: data.address, //
				comment: data.comment, //
				totalAmount: userCart.totalAmount, //
				status: OrderStatus.PENDING, //
				items: JSON.stringify(userCart.items), //
				//		userId, // –î–æ–±–∞–≤–ª—è–µ–º userId –≤ –æ–±—ä–µ–∫—Ç data
			},
		})

		/* –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É */
		await prisma.cart.update({
			where: {
				id: userCart.id,
			},
			data: {
				totalAmount: 0,
			},
		})

		await prisma.cartItem.deleteMany({
			where: {
				cartId: userCart.id,
			},
		})

		/* –û–ø–ª–∞—Ç–∞ */
		const paymentData = await createPayment({
			amount: order.totalAmount,
			orderId: order.id,
			description: '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #' + order.id,
		})

		if (!paymentData) {
			throw new Error('–ü–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
		}
		await prisma.order.update({
			where: {
				id: order.id,
			},
			data: {
				paymentId: paymentData.id,
			},
		})
		const paymentUrl = paymentData.confirmation.confirmation_url

		/* –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ –ø–æ—á—Ç—É. –ü–æ—Ç—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ */
		await sendEmail(
			data.email,
			'Next Pizza / –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ #' + order.id,
			PayOrderTemplate({
				orderId: order.id,
				totalAmount: order.totalAmount,
				paymentUrl,
			}),
		)
		return paymentUrl
	} catch (err) {
		console.log('[CreateOrder] Server error', err)
	}
}
// 21:35:00
export async function updateUserInfo(body: Prisma.UserUpdateInput) {
	try {
		const currentUser = await getUserSession()
		if (!currentUser) {
			throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω')
		}
		const findUser = await prisma.user.findFirst({
			where: {
				id: Number(currentUser.id),
			},
		})
		await prisma.user.update({
			where: {
				id: Number(currentUser.id),
			},
			data: {
				fullName: body.fullName,
				email: body.email,
				password: body.password ? hashSync(body.password as string, 10) : findUser?.password,
			},
		})
	} catch (err) {
		console.log('Error [UPDATE_USER]', err)
		throw err
	}
}
// 21:43:00
export async function registerUser(body: Prisma.UserCreateInput) {
	try {
		const user = await prisma.user.findFirst({
			where: {
				email: body.email,
			},
		})
		if (user) {
			if (!user.verified) {
				throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
			}
			throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		}
		const createdUser = await prisma.user.create({
			data: {
				fullName: body.fullName,
				email: body.email,
				password: hashSync(body.password, 10),
			},
		})
		const code = Math.floor(100000 + Math.random() * 900000).toString() // utythfwbz rjlf
		await prisma.verificationCode.create({
			data: {
				code,
				userId: createdUser.id,
			},
		})
		await sendEmail(
			createdUser.email,
			'Next Pizza / üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
			VerificationUserTemplate({
				code,
			}),
		)
	} catch (err) {
		console.log('Error [CREATE_USER]', err)
		throw err
	}
}
